openapi: 3.0.3
info:
  title: API for Astrophysics Data System (ADS)
  description: |
    ## API for the NASA Astrophysics Data System

    The source code for the project can be found at https://github.com/adsabs.

    Individual components:
    * Search: https://github.com/adsabs/solr-service
    * Stored search: https://github.com/adsabs/vault
    * Libraries: https://github.com/adsabs/biblib-service
    * Export: https://github.com/adsabs/export_service
    * Metrics: https://github.com/adsabs/metrics_service
    * Author affiliation: https://github.com/adsabs/author_affiliation_service
    * Citation helper: https://github.com/adsabs/citation_helper_service
    * Classic import: https://github.com/adsabs/harbour-service
    * Objects: https://github.com/adsabs/object_service
    * Recommender: https://github.com/adsabs/oracle_service
    * Reference: https://github.com/adsabs/reference_service
    * Resolver: https://github.com/adsabs/resolver_service
    * Notifications: https://github.com/adsabs/vault
    * Visualizations: https://github.com/adsabs/vis-services

    This documentation follows the [OpenAPI specification](https://swagger.io/specification/).
    The UI was created with [RapiDoc](https://mrin9.github.io/RapiDoc/index.html).
  termsOfService: https://ui.adsabs.harvard.edu/help/terms/
  contact:
    name: ADS Help
    url: https://github.com/adsabs/adsabs-dev-api
    email: adshelp@cfa.harvard.edu
  version: 1.0.0
servers:
  - url: https://api.adsabs.harvard.edu/{basePath}
    description: Production Server
    variables:
      basePath:
        default: v1
        enum:
          - v1
  - url: https://devapi.adsabs.harvard.edu/{basePath}
    description: Development Server
    variables:
      basePath:
        default: v1
        enum:
          - v1
tags:
  - name: search
  - name: stored search
  - name: libraries
  - name: export (tagged formats)
  - name: export (LaTeX formats)
  - name: export (XML formats)
  - name: export (other)
  - name: metrics
  - name: author affiliation
  - name: citation helper
  - name: classic import
  - name: objects
  - name: recommender
  - name: reference
  - name: resolver
  - name: notifications
  - name: visualizations
components:
  securitySchemes:
    ApiKeySecurity:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    q:
      $ref: parameters.yaml#/q
    rows:
      $ref: parameters.yaml#/rows
    fq:
      $ref: parameters.yaml#/fq
    fl:
      $ref: parameters.yaml#/fl
    start:
      $ref: parameters.yaml#/start
    sort:
      $ref: parameters.yaml#/sort
    bibcode:
      $ref: parameters.yaml#/bibcode
    link:
      $ref: parameters.yaml#/link
    queryId:
      $ref: parameters.yaml#/queryId
    myadsId:
      $ref: parameters.yaml#/myadsId
  responses:
    QTree:
      $ref: responses.yaml#/QTree
    SearchResults:
      $ref: responses.yaml#/SearchResults
    VaultResponse:
      $ref: responses.yaml#/VaultResponse
    ExportResponse:
      $ref: responses.yaml#/ExportResponse
    ExportResponseGet:
      $ref: responses.yaml#/ExportResponseGet
    ResolverResponse:
      $ref: responses.yaml#/ResolverResponse
  schemas:
    qtree:
      $ref: schemas.yaml#/qtree
    results:
      $ref: schemas.yaml#/results
    doc:
      $ref: schemas.yaml#/doc
    responseHeader:
      $ref: schemas.yaml#/responseHeader
    vaultObject:
      $ref: schemas.yaml#/vaultObject
    basicMetricsResponse:
      $ref: schemas.yaml#/basicMetricsResponse
    myADSsummaryResponse:
      $ref: schemas.yaml#/myADSsummaryResponse
    myADSdetailResponse:
      $ref: schemas.yaml#/myADSdetailResponse
    bibcodeObject:
      $ref: schemas.yaml#/bibcodeObject
    bibcodesObject:
      $ref: schemas.yaml#/bibcodesObject
    libraryMetadata:
      $ref: schemas.yaml#/libraryMetadata
  requestBodies:
    exportBody:
      description: >
          JSON containing the bibcodes to export
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bibcodeObject'
security:
  - ApiKeySecurity: []
paths:
  /search/query:
    get:
      summary: Search ADS
      description: >
        Do a search.


        Query the search engine and return results. All parameters have to be
        properly url-encoded UTF-8. The response body will always be JSON
        encoded.


        ## Example Search

        `q=bibcode:2012A%26A...542A..16R&fl=bibcode,author,pub,identifier,title,property,abstract,keyword,aff`

        ## Example Response

        ```{
          "responseHeader":{
            "status":0,
            "QTime":3,
            "params":{
              "q":"bibcode:2012A&A...542A..16R",
              "fl":"bibcode,author,pub,identifier,title,property,abstract,keyword",
              "start":"0",
              "rows":"10",
              "wt":"json"}},
          "response":{"numFound":1,"start":0,"docs":[
            {
              "identifier":["2012arXiv1204.4485R",
                "2012A&A...542A..16R",
                "10.1051/0004-6361/201118723",
                "10.1051/0004-6361/201118723",
                "arXiv:1204.4485",
                "2012arXiv1204.4485R"],
              "abstract":"X-ray surveys contain sizable numbers [...],
              "property":["ARTICLE",
                "ASSOCIATED",
                "DATA",
                "EPRINT_OPENACCESS",
                "ESOURCE",
                "OPENACCESS",
                "PUB_OPENACCESS",
                "REFEREED"],
              "bibcode":"2012A&A...542A..16R",
              "author":["Ranalli, P.",
                "Comastri, A.",
                "Zamorani, G.",
                "Cappelluti, N.",
                "Civano, F.",
                "Georgantopoulos, I.",
                "Gilli, R.",
                "Schinnerer, E.",
                "Smolčić, V.",
                "Vignali, C."],
              "pub":"Astronomy and Astrophysics",
              "keyword":["X-rays: galaxies",
                "radio continuum: galaxies",
                "galaxies: fundamental parameters",
                "galaxies: star formation",
                "galaxies: active",
                "galaxies: high-redshift",
                "Astrophysics - Cosmology and Extragalactic Astrophysics"],
              "title":["X-ray properties of radio-selected star forming galaxies in the Chandra-COSMOS survey"]}]
          }}
        ```

        ## Example Search Requests

        Query | Explanation

        ------|-------------------------------------------------
         `q=bibcode:2011ApJ...737..103S` |  Search by bibcode
         `q=black+holes&fq=database:astronomy` |  Search for "black holes", restricted to astronomy content
         `q=dark+energy&fq=author:"Civano,+F"&sort=citation_count+desc` |  Search for "dark energy", filter by author, sort by citation count
        `q=dark+energy&sort=citation_count+desc&fl=bibcode,property` |   Return
        *bibcode* and *property* values

        `q=author:"Kurtz,+M"&fq=property:refereed`|   Limit a search to only
        refereed articles

        `q=transiting+exoplanets&rows=200`|  Search for "transiting exoplanets",
        get 200 rows

        `q=transiting+exoplanets&rows=200&start=201`|   Same search but get the
        next 200 rows

      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/fq'
        - $ref: '#/components/parameters/fl'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/rows'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/SearchResults'
        '400':
          description: Malformed request
        '404':
          description: Resource not found
        '499':
          description: Server too busy
        '500':
          description: Server error
      tags:
        - search
        - user-facing
  /search/qtree:
    get:
      summary: (advanced) Search ADS and return a query tree object
      description: >
        Returns a `query tree` (Abstract Syntax Tree - AST) as understood by our
        query parser. The structure can be used by external applications to
        rewrite the query or check its syntactic correctness.


        ## Example result

        ```JSON

        {
             "qtree": "\n{\"name\":\"OPERATOR\", \"label\":\"DEFOP\", \"children\": [\n    {\"name\":\"MODIFIER\", \"label\":\"MODIFIER\", \"children\": [\n        {\"name\":\"TMODIFIER\", \"label\":\"TMODIFIER\", \"children\": [\n            {\"name\":\"FIELD\", \"label\":\"FIELD\", \"children\": [\n                {\"name\":\"QNORMAL\", \"label\":\"QNORMAL\", \"children\": [\n                    {\"name\":\"TERM_NORMAL\", \"input\":\"star\", \"start\":0, \"end\":3}]\n                }]\n            }]\n        }]\n    }]\n}",
             "responseHeader": {
              "status": 0,
              "QTime": 6,
              "params": {
               "q": "star",
               "wt": "json",
               "fl": "id"
              }
             }
            }
        ```
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/fq'
        - $ref: '#/components/parameters/fl'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/rows'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/QTree'
        '400':
          description: Malformed request
        '404':
          description: Resource not found
        '499':
          description: Server too busy
        '500':
          description: Server error
      tags:
        - search
        - user-facing
  /search/bigquery:
    post:
      summary: Search using bigquery
      description: >
        Search endpoint which accepts a list of many IDs (bibcodes). Supports
        paging.


        This endpoint accepts standard search query parameters and returns
        standard search results, but it also accepts as input a very large query
        (i.e. a query that can be expressed only as a list of search
        criteria, typically IDs). There is currently no limit to the size of the
        submitted data (besides buffer/time limits imposed by our API
        frontend); however, there are severe limits on how often you can call
        this endpoint. Typically, only 100 requests per day per user are allowed.


        The `bigquery` is always executed as a filter **after** the main query
        (to filter out unwanted results and keep only the results
        specified by the `bigquery`). You may want to use `q=*:*` to filter
        contents of the whole database, however it is advisable to make
        the `q` as specific as possible. Broad queries have higher `qTime`
        (execution time) and that will be counted towards your rate-limit
        (in the future).


        The bigquery filter is *applied only after* the main search (i.e. it
        limits results of the main search).


        ## Example requests


        Python


        ```
          import requests
          bibcodes="bibcode\n1907AN....174...59.\n1908PA.....16..445.\n1989LNP...334..242S"
          r = requests.post('https://api.adsabs.harvard.edu/v1/search/bigquery',
               params={'q':'*:*', 'wt':'json', 'fq':'{!bitset}', 'fl':'bibcode'},
               headers={'Authorization': 'Bearer:TOKEN'},
               data=bibcodes)
        ```


        Bash curl


        ```
          curl 'https://api.adsabs.harvard.edu/v1/search/bigquery?q=*:*&fl=bibcode' \
          -X 'POST' -H 'Authorization: Bearer TOKEN' -H 'Content-Type: big-query/csv' \
          -d $'bibcode\n1907AN....174...59.\n1908PA.....16..445.\n1989LNP...334..242S'
        ```
      security:
        - ApiKeySecurity: []
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/fq'
        - $ref: '#/components/parameters/fl'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/rows'
        - $ref: '#/components/parameters/sort'
      requestBody:
        description: >
          Newline separated list of values; the first line specifies the index
          field, the rest are the search values. <br/> Currently, we
          allow searching in `bibcode` index only. You can submit `canonical`
          as well as `alternate` bibcodes - the search will automatically
          match both. In the future, the list of available indexes may be
          extended.


          Note: to correctly format the POST payload, including the newline (\n)
          characters, in a bash curl request, use ANSI-C quoting (e.g. `$'...'`)
          as shown in the examples.
        content:
          big-query/csv:
            schema:
              type: string
      responses:
        '200':
          $ref: '#/components/responses/SearchResults'
        '404':
          $ref: '#/components/responses/SearchResults'
        '499':
          description: Server too busy
        '500':
          description: Server error
      tags:
        - search
        - user-facing
  /vault/query:
    post:
      summary: 01. Save a query
      description: |
        Save a query for later execution. Can be either a regular query or a bigquery.

        ## Example request

        ```bash
          $ curl 'https://api.adsabs.harvard.edu/v1/vault/query' -H 'Authorization: Bearer:TOKEN' \
            -X POST -d $'{"q":"*:*", "bigquery": "bibcode\\n2015IAUGA..2257982A\\n2015IAUGA..2257768A\\n2015IAUGA..2257639R", "fq": "{!bitset}"}' \
            -H 'Content-Type: application/json'

          > {"qid": "00b39fe4274760f5d8b348815a661ee2", "numFound": 3}
        ```
      requestBody:
        description: >
          JSON object holding the values to submit.


          Note: to correctly format the POST payload if running a bigquery,
          including the newline (\n) characters, in a bash curl request,
          use ANSI-C quoting (e.g. `$'...'`) as shown in the examples.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vaultObject'
      tags:
        - stored search
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/VaultResponse'
        '404':
          description: QID object not found
  /vault/query/{queryId}:
    get:
      summary: 02. Retrieve information about a stored query
      description: |
        Retrive information about the previously stored query.

        ## Example output

        ```JSON
        {
            "numfound": 9,
            "qid": "dcd173130bbbbb957eafd866baf38b2c",
            "query": "{\"query\": \"fq=%7B%21bitset%7D&q=%2A%3A%2A\", \"bigquery\": \"bibcode\\n15ASPC..495..40015IAUGA..2257982A\\n2015IAUGA..2257768A\\n2015IAUGA..2257639R\\n2015ASPC..492..208G\\n2015ASPC..492..204F\\n2015ASPC..492..189A\\n2015ASPC..492..150T\\n2015ASPC..492...85E\\n2015ASPC..492...80H\\n2015AAS...22533656H\"}"
        }
        ```
      parameters:
        - $ref: '#/components/parameters/queryId'
      tags:
        - stored search
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/VaultResponse'
        '404':
          description: QID object not found
  /vault/execute_query/{queryId}:
    get:
      summary: 03. Search using a stored query
      description: >
        Search using the stored query and return the same data as Search API
        endpoint.


        ## Example response


        ```JSON
          {
            "response": {
                "docs": [
                    {
                        "id": "10690723"
                    },
                    {
                        "id": "11057363"
                    },
                    {
                        "id": "10564749"
                    },
                    {
                        "id": "10796089"
                    },
                    {
                        "id": "10867252"
                    },
                    {
                        "id": "10867221"
                    },
                    {
                        "id": "10867251"
                    },
                    {
                        "id": "10867277"
                    },
                    {
                        "id": "11057812"
                    }
                ],
                "numFound": 9,
                "start": 0
            },
            "responseHeader": {
                "QTime": 6,
                "params": {
                    "fl": "id",
                    "fq": "{!bitset}",
                    "q": "*:*",
                    "wt": "json"
                },
                "status": 0
            }
          }
        ```
      parameters:
        - $ref: '#/components/parameters/queryId'
        - name: jsonobj
          description: >-
            You can submit query parameters that override parts of the saved
            query.
          required: false
          in: header
          schema:
            $ref: '#/components/schemas/vaultObject'
      tags:
        - stored search
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/SearchResults'
        '404':
          description: QID object not found
  /vault/query2svg/{queryId}:
    get:
      summary: 04. Return an SVG for a stored query
      description: >
        Returns an SVG for a stored query. The image shows the number of
        results returned by the stored query.
      tags:
        - stored search
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        '200':
          description: Code of the SVG image
          content:
            image/svg+xml:
              schema:
                type: string
                xml:
                  name: svg
  /biblib/libraries:
    get:
      summary: 01. View all libraries for a given user
      description: >
        View all libraries for the user associated with the given API token.
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: Metadata for all libraries for a given user
          content:
            application/json:
              schema:
                type: object
                properties:
                  libraries:
                    type: array
                    items:
                      $ref: '#/components/schemas/libraryMetadata'
        '400':
          description: >
            No username passed
    post:
      summary: 03. Create a new library
      description: >
        Create a library for the requesting user. Returns the metadata of the
        library created.
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the metadata and bibcodes of the library to be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >
                    (optional) name of the library (must be unique for that user).
                    The default is Untitled Library, with an incremented integer
                    starting with 1 appended.
                description:
                  type: string
                  description: >
                    (optional) description of the library. The default is "My ADS library"
                public:
                  type: boolean
                  default: false
                  description: >
                    (optional) set to true to allow public access. The default is false,
                    or a private library
                bibcode:
                  type: array
                  description: >
                    (optional) list of bibcodes to add. The default is an empty library
                  items:
                    type: string
      responses:
        '200':
          description: >
            Metadata of the library just created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  id:
                    type: string
                  description:
                    type: string
                  bibcode:
                    type: array
                    items:
                      type: string
        '400':
          description: >
            No username passed, or wrong type passed
        '409':
          description:
            Duplicate library name exists
  /biblib/libraries/{library_id}:
    get:
      summary: 02. View a single library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        View metadata and contents of a specific library.
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: Metadata and contents of the given library
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/libraryMetadata'
                  documents:
                    type: array
                    description: Array of bibcodes in library
                    items:
                      type: string
                  solr:
                    type: object
                    description: Response from solr, when validating library contents
                    properties:
                      response:
                        type: object
                        properties:
                          docs:
                            type: array
                            items:
                              type: object
                              properties:
                                bibcode:
                                  type: string
                          numFound:
                            type: integer
                          start:
                            type: integer
                      responseHeader:
                        type: object
                        properties:
                          QTime:
                            type: integer
                          params:
                            type: object
                            properties:
                              q:
                                type: string
                              fl:
                                type: string
                              start:
                                type: string
                              internal_logging_params:
                                type: string
                              sort:
                                type: string
                              fq:
                                type: string
                              rows:
                                type: string
                              wt:
                                type: string
                          status:
                            type: integer
                  updates:
                    type: object
                    description: Updates from Solr validation
                    properties:
                      duplicates_removed:
                        type: integer
                        description: Number of bibcodes removed because they are duplicates
                      update_list:
                        type: array
                        description: >
                          List of dictionaries such that a single element describes
                          the original bibcode (key) and the updated bibcode now being stored (item)
                        items:
                          type: object
                      num_updated:
                        type: integer
                        description: Number of documents modified based on the response from Solr
  /biblib/libraries/operations/{library_id}:
    post:
      summary: 10. Perform set operations on one or more libraries
      parameters:
        - name: library_id
          description: Library ID for the primary library
          required: true
          in: path
          schema:
            type: string
      description: >
        Perform set operations on one or more libraries. The library_id (string) is
        the unique identifier of the primary library, as specified in the /libraries
        GET response. Depending on the operation, a secondary library ID may need to
        be passed in the post payload.

        ## Examples

        **Union**: take the union of 3 libraries, using the default description and public settings

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/iRZhyhvaSWe0uWwcXKt77w \
            -X POST \
            -d '{"action": "union", "libraries": ["rdRs4g4AQ522k9TJ2umtVA", "s56fjycaRMKxw6tDEr31XQ"], "name": "New union library"}'
        ```


        *Response*:


        `{"id": "BeUbSWXtTPCaRhRV3nec_w", "bibcode": ["2009A&A...502..515G", "2011ApJ...734...87R", "2010ApJ...710..248C", "2003ApJ...595..665X", "2011ApJ...731L..12S", "2010ApJ...721..505R", "2010ApJ...710L.156R", "2010ApJ...723.1255R", "2006ApJ...639L..51A", "2001AJ....122.2993S", "2010ASPC..423..355R", "2010A&A...518A..59G", "2010ApJ...721L..48K"], "description": "Union of 891661ca-1bda-4967-b4b9-6c1c5cab7bef with [u'rdRs4g4AQ522k9TJ2umtVA', u's56fjycaRMKxw6tDEr31XQ']", "name": "New union library"}`


        **Intersection**: take the intersection of 2 libraries, using the default public settings

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \
            -X POST \
            -d '{"action": "intersection", "libraries": ["rdRs4g4AQ522k9TJ2umtVA"], "name": "New intersection library", "description": "Sample intersection library"}'
        ```


        *Response*:


        `{"id": "8V8DzNqyQuOyTX6RF9x7qQ", "bibcode": ["2001AJ....122.2993S", "2009A&A...502..515G", "2006ApJ...639L..51A", "2010ApJ...710..248C", "2003ApJ...595..665X", "2010A&A...518A..59G", "2011ApJ...731L..12S"], "description": "Sample intersection library", "name": "New intersection library"}`


        **Difference**: take the difference of 2 libraries

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \
            -X POST \
            -d '{"action": "difference", "libraries": ["rdRs4g4AQ522k9TJ2umtVA"], "name": "New difference library", "description": "Sample difference library", "public": true}'
        ```


        *Response*:


        `{"id": "9KBh8sVHQxaVkoPALtoXgg", "bibcode": ["2011ApJ...734...87R", "2010ApJ...723.1255R", "2010ApJ...710L.156R", "2010ASPC..423..355R", "2010ApJ...721L..48K", "2010ApJ...721..505R"], "description": "Sample difference library", "name": "New difference library"}`


        **Empty**: empty a library of all of its bibcode contents

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/9KBh8sVHQxaVkoPALtoXgg \
            -X POST \
            -d '{"action": "empty"}'
        ```

        *Response*:


        `{"public": true, "bibcode": [], "name": "New difference library", "description": "Sample difference library"}`


        **Copy**: copy the bibcode contents from the primary library to the secondary library (this will not empty the library first)

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \
            -X POST \
            -d '{"action": "copy", "libraries": ["9KBh8sVHQxaVkoPALtoXgg"]}'
        ```


        *Response*:


        `{"public": true, "bibcode": ["2009A&A...502..515G", "2010ApJ...710L.156R", "2010ApJ...710..248C", "2003ApJ...595..665X", "2011ApJ...731L..12S", "2010ApJ...721..505R", "2011ApJ...734...87R", "2010ApJ...723.1255R", "2006ApJ...639L..51A", "2001AJ....122.2993S", "2010ASPC..423..355R", "2010A&A...518A..59G", "2010ApJ...721L..48K"], "name": "New difference library", "description": "Sample difference library"}`
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the action to be performed and metadata of the library to be created.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: >
                    Set operation to perform; allowed values are:
                      * union: take the union of the primary and the secondary
                      libraries. The result is saved to a new library.
                      * intersection: take the intersection of the primary and the
                      secondary libraries. The result is saved to a new library
                      * difference: take the difference between the primary and the
                      secondary libraries. The result is saved to a new library
                      * copy: copy the contents of the primary library into the
                      secondary library. The secondary library is not emptied first;
                      use the empty operation on the secondary library first in order
                      to create a duplicate of the primary library in the secondary library
                      * empty: empty the primary library of its contents (no secondary
                      library ID is needed)
                libraries:
                  type: array
                  description: >
                    list of secondary library IDs; multiple secondary libraries are allowed
                    for [union, intersection, difference]; one secondary library is allowed
                    for copy; no secondary libraries are allowed for empty
                  items:
                    type: string
                name:
                  type: string
                  description: >
                    name of the new library to be created for [union, intersection, difference];
                    the name must be unique for a given user; if no name is specified, the
                    name used will be "Untitled" with a timestamp
                description:
                  type: string
                  description: >
                    description of the new library to be created for [union, intersection,
                    difference]; if no description is specified, the description used will
                    include the set operation used and the primary and secondary library IDs
                public:
                  type: boolean
                  description: >
                    sets whether the new library created by [union, intersection,
                    difference] is publicly viewable or not; the new library will be
                    private unless otherwise specified
      responses:
        '200':
          description: Metadata for created/modified library
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: ID of created library (if any)
                    type: string
                  name:
                    description: Name of created/modified library
                    type: string
                  description:
                    description: Description of created/modified library
                    type: string
                  bibcode:
                    description: Bibcodes in created/modified library
                    items:
                      type: string
        '400':
          description: >
            No username passed, bad library ID passed, wrong type passed,
            secondary libraries not specified where required, too many secondary libraries
            specified, or user requested a non-standard operation
        '403':
          description: >
            User does not have permission to perform this operation
        '409':
          description: >
            Duplicate library name exists
  /biblib/documents/{library_id}:
    post:
      summary: 04. Add or remove documents from a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Add or delete a document to a given library. Returns the number
        of documents added or removed.


        The following type of user can add or remove documents:

        * owner

        * admin

        * write
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the action to be performed and metadata of the library to be created.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - bibcode
              properties:
                bibcode:
                  type: array
                  description: >
                    List of bibcodes to be added or removed
                  items:
                    type: string
                action:
                  type: string
                  description: >
                    'add' or 'remove' to add or remove the given bibcodes from the specified library
      responses:
        '200':
          description:
            Returns number of bibcodes added or removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  number_added:
                    type: integer
                    description: >
                      Number of bibcodes added, if 'add' is used
                  number_removed:
                    type: integer
                    description: >
                      Number of bibcodes removed, if 'remove' is used
        '400':
          description: >
            No username passed, bad library ID passed, wrong type passed,
            or user requested a non-standard operation
        '403':
          description: >
            User does not have permission to perform this operation
    put:
      summary: 05. Update the metadata of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Update the metadata of a given library.


        The following type of user can edit library metadata:

        * owner

        * admin
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the metadata to update. If some fields don't
          need to be changed, they don't need to be included in the payload.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >
                    New name of the library
                description:
                  type: string
                  description: >
                    New library description
                public:
                  type: boolean
                  description: >
                    true if the library should be publicly viewable,
                    false if it should be private (note that this is case
                    sensitive and should be lower case)
      responses:
        '200':
          description: >
            Returns the key/value that was requested to be updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  public:
                    type: boolean
        '400':
          description: >
            No username passed, bad library ID passed, or wrong type passed
        '403':
          description: >
            User does not have permission to perform this operation
        '409':
          description: >
            Duplicate library name exists
        '410':
          description: >
            Library specified does not exist
    delete:
      summary: 06. Delete a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Delete the given library.


        The following type of user can delete the library:

        * owner
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: >
            Returns empty object
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >
            No username passed or bad library ID passed
        '403':
          description: >
            User does not have permission to perform this operation
        '410':
          description: >
            Library specified does not exist
  /biblib/permissions/{library_id}:
    get:
      summary: 07. View permissions of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        View permissions of a specific library.
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: List of all permissions for the user for the library
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: array
                    description: >
                      Key is email of the user, item is a list of that user's
                      permissions for the given library
                    items:
                      type: string
        '400':
          description: >
            No username passed, or bad library ID passed
        '403':
          description: >
            User does not have permission to perform this operation
    post:
      summary: 08. Edit permission of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Edit the permissions of a library


        The following type of user can add or remove documents:

        * owner

        * admin
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the email of the user whose permissions will be modified
          and the permissions to be added or removed. User may not modify their
          own permissions
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - permission
              properties:
                email:
                  type: string
                  description: >
                    Email address of user whose permissions will be modified
                permission:
                  type: object
                  description: >
                    Only required to include permissions that will be modified
                  properties:
                    read:
                      type: boolean
                    write:
                      type: boolean
                    admin:
                      type: boolean
      responses:
        '200':
          description: >
            Returns empty object
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >
            No username passed, bad library ID passed, or wrong type passed
        '403':
          description: >
            User does not have permission to perform this operation
        '404':
          description: >
            User does not have an ADS account
  /biblib/transfer/{library_id}:
    post:
      summary: 09. Transfer ownership of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Transfer ownership of a library from one user to another


        The following type of user can add or remove documents:

        * owner
      tags:
        - libraries
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the email of the user that library ownership will
          be transferred to
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: >
                    Email address of user who ownership will be transferred to
      responses:
        '200':
          description: >
            Returns empty object
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >
            No username passed, bad library ID passed, or wrong type passed
        '403':
          description: >
            User does not have permission to perform this operation
        '404':
          description: >
            User does not have an ADS account
  /export/bibtexabs:
    post:
      summary: BibTeX + abstract export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the BibTeX + abstract format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: BibTeX + abstract export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the BibTeX + abstract format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/bibtex:
    post:
      summary: BibTeX export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the BibTeX format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: BibTeX export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the BibTeX format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/ads:
    post:
      summary: ADS (generic tagged) export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the ADS format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: ADS (generic tagged) export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the ADS format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/endnote:
    post:
      summary: EndNote export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the EndNote format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: EndNote export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the EndNote format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/procite:
    post:
      summary: ProCite export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the ProCite format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: ProCite export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the ProCite format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/ris:
    post:
      summary: RIS (Refman) export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the RIS (Refman) format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: RIS (Refman) export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the RIS (Refman) format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/refworks:
    post:
      summary: RefWorks export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the RefWorks format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: RefWorks export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the RefWorks format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/medlars:
    post:
      summary: MEDLARS export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the MEDLARS format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: MEDLARS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the MEDLARS format
      tags:
        - export (tagged formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/aastex:
    post:
      summary: AASTeX export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the AASTeX format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: AASTeX export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the AASTeX format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/icarus:
    post:
      summary: Icarus export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the Icarus format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: Icarus export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the Icarus format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/mnras:
    post:
      summary: MNRAS export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the MNRAS format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: MNRAS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the MNRAS format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/soph:
    post:
      summary: Solar Physics (SoPh) export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the Solar Physics (SoPh) format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: Solar Physics (SoPh) export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the Solar Physics (SoPh) format
      tags:
        - export (LaTeX formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/dcxml:
    post:
      summary: Dublin Core (DC) XML export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the Dublin Core (DC) XML format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: Dublin Core (DC) XML export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the Dublin Core (DC) XML format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/refxml:
    post:
      summary: REF-XML export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the REF-XML format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: REF-XML export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the REF-XML format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/refabsxml:
    post:
      summary: REFABS-XML export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the REFABS-XML format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: REFABS-XML export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the REFABS-XML format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/votable:
    post:
      summary: VOTables export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the VOTables format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: VOTables export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the VOTables format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/rss:
    post:
      summary: RSS export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the RSS format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: RSS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the RSS format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/rss/{link}:
    get:
      summary: RSS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
        - $ref: '#/components/parameters/link'
      description: >
        Export the given bibcode in the RSS format
      tags:
        - export (XML formats)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/ieee:
    post:
      summary: IEEE export (Unicode-encoded) for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the IEEE format
      tags:
        - export (other)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: IEEE export (Unicode-encoded) for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the IEEE format
      tags:
        - export (other)
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/csl:
    post:
      summary: CSL export for one or more bibcodes (POST)
      description: >
        Export the given bibcodes in the given style and format
      tags:
        - export (other)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the bibcodes to export, and the style and format
          to export them in.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/bibcodesObject'
                - type: object
                  required:
                    - style
                    - format
                  properties:
                    style:
                      description: Journal style to use
                      type: string
                      enum:
                        - aastex
                        - icarus
                        - mnras
                        - soph
                        - aspc
                        - apsj
                        - aasj
                        - ieee
                    format:
                      description: Output format; use 1 for Unicode, 2 for HTML, or 3 for LaTeX
                      type: integer
                    journalformat:
                      description: >
                        Format of journal name; used only for aastex, aspc, and aasj styles.
                        Use 1 for AASTeX macros (default), 2 for journal abbreviations, or 3 for full journal name.
                      type: integer
                    sort:
                      description: Sort order for export
                      type: string
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
  /export/custom:
    post:
      summary: Custom-format export for one or more bibcodes (POST)
      description: >
        Export the given bibcodes in the given custom format
      tags:
        - export (other)
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the bibcodes to export, and the custom format
          to export them in.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/bibcodesObject'
                - type: object
                  required:
                    - format
                  properties:
                    format:
                      description: >
                        Custom format; see the [main export documentation](https://ui.adsabs.harvard.edu/help/actions/export)
                        for more information.
                      type: string
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
  /metrics:
    post:
      summary: Retrieve metrics for one or more bibcodes
      description: >
        This endpoint retrieves some or all of the available citation metrics for
        one or more bibcodes. More documentation is available [here](https://github.com/adsabs/adsabs-dev-api/blob/master/Metrics_API.ipynb).


        The available statistics types are:


        * 'basic': publication and usage stats (all papers, and just refereed papers); returns
        'basic stats' and 'basic stats refereed'

        * 'citations': citation stats; returns 'citation stats' and 'citation stats refereed'

        * 'indicators': indicators, like the h-index, g-index, m-index, etc.; returns
        'indicators' and 'indicators refereed'

        * 'histograms': publication, citation, reads and downloads histograms; returns 'histograms'

        * 'timeseries': time series for a set of indicators; returns 'time series'
      tags:
        - metrics
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the bibcode(s) to produce metrics for, as well as types of metrics desired.
          Depending on the type of metrics requested, other options may be included in the payload.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/bibcodesObject'
                - type: object
                  properties:
                    types:
                      description: Types of metrics to return. If not specified, all metrics will be returned.
                      type: array
                      items:
                        type: string
                        enum:
                          - basic
                          - citations
                          - indicators
                          - histograms
                          - timeseries
                    histograms:
                      description: >
                        If the metrics type is 'histograms', types of histograms to return.
                        If not specified, all histograms will be returned.


                        The available histogram types are:


                        * 'publications': returns 'all publications', 'refereed publications', 'all publications normalized', 'refereed publications normalized'

                        * 'reads': returns 'all reads', 'refereed reads', 'all reads normalized', 'refereed reads normalized'

                        * 'downloads': returns 'all downloads', 'refereed downloads', 'all downloads normalized', 'refereed downloads normalized'

                        * 'citations': returns 'refereed to refereed', 'nonrefereed to refereed', 'refereed to nonrefereed', 'nonrefereed to nonrefereed', 'refereed to refereed normalized', 'nonrefereed to refereed normalized', 'refereed to nonrefereed normalized', 'nonrefereed to nonrefereed normalized'
                      type: array
                      items:
                        type: string
                        enum:
                          - publications
                          - reads
                          - downloads
                          - citations
      responses:
        '200':
          description: >
            JSON containing the requested metrics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicMetricsResponse'
                  - type: object
                    properties:
                      indicators:
                        type: object
                        properties:
                          g:
                            type: integer
                          h:
                            type: integer
                          i10:
                            type: integer
                          i100:
                            type: integer
                          m:
                            type: number
                          read10:
                            type: number
                          riq:
                            type: integer
                          tori:
                            type: number
                      indicators refereed:
                        type: object
                        properties:
                          g:
                            type: integer
                          h:
                            type: integer
                          i10:
                            type: integer
                          i100:
                            type: integer
                          m:
                            type: number
                          read10:
                            type: number
                          riq:
                            type: integer
                          tori:
                            type: number
                      time series:
                        type: object
                        properties:
                          g:
                            type: object
                            properties:
                              year:
                                type: integer
                          h:
                            type: object
                            properties:
                              year:
                                type: integer
                          i10:
                            type: object
                            properties:
                              year:
                                type: integer
                          i100:
                            type: object
                            properties:
                              year:
                                type: integer
                          m:
                            type: object
                            properties:
                              year:
                                type: number
                          read10:
                            type: object
                            properties:
                              year:
                                type: number
                          riq:
                            type: object
                            properties:
                              year:
                                type: integer
                          tori:
                            type: object
                            properties:
                              year:
                                type: number
        '403':
          description: >
            Unable to get results
        '500':
          description:
            Metrics request blew up
  /metrics/{bibcode}:
    get:
      summary: Retrieve metrics for one bibcode
      description: >
        Similar to the `/metrics` endpoint, but returns data for a single bibcode only.
        Does not return indicators or timeseries.
      parameters:
        - name: bibcode
          description: Bibcode to return metrics for
          required: true
          in: path
          schema:
            type: string
      tags:
        - metrics
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: >
            JSON containing the requested metrics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicMetricsResponse'
        '403':
          description: >
            Unable to get results
        '500':
          description:
            Metrics request blew up
  /metrics/detail:
    post:
      summary: Retrieve detail-level metrics for one or more bibcodes
      description: >
        Provides basic, year-by-year metrics on a per-bibcode basis.
      tags:
        - metrics
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: JSON containing the bibcode(s) to produce metrics for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bibcodesObject'
      responses:
        '200':
          description: JSON containing the requested metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  bibcode:
                    type: object
                    properties:
                      citations:
                        type: object
                        properties:
                          year:
                            type: integer
                      downloads:
                        type: object
                        properties:
                          year:
                            type: integer
                      reads:
                        type: object
                        properties:
                          year:
                            type: integer
                      ref_citations:
                        type: object
                        properties:
                          year:
                            type: integer
                  skipped bibcodes:
                    type: array
                    items:
                      type: string
        '403':
          description: >
            Unable to get results
        '500':
          description:
            Metrics request blew up
  /author-affiliation/search:
    post:
      summary: Create the author-affiliations report
      description: >
        Create the author-affiliations report, generally used for reporting
        co-authors and their affiliations to grant agencies. Returns
        information in JSON.
      tags:
        - author affiliation
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: JSON containing the bibcode(s) to produce the author affiliations for.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/bibcodesObject'
                - type: object
                  properties:
                    maxauthor:
                      description: First N authors for each paper to report on
                      type: integer
                    numyears:
                      description: Last N years to retrieve affiliations for
                      type: integer
      responses:
        '200':
          description: JSON containing the requested author affiliations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        authorName:
                          type: string
                        affiliations:
                          type: object
                          properties:
                            name:
                              type: string
                            years:
                              type: array
                              items:
                                type: string
                            lastActiveDate:
                              type: string
        '400':
          description: Bad request, check payload
        '404':
          description: No result from Solr
  /author-affiliation/export:
    post:
      summary: Export the author-affiliations report
      description: >
        Export the author-affiliations report, generally used for reporting
        co-authors and their affiliations to grant agencies. Outputs to CSV,
        Excel, text, or directly to the browser/terminal. To save to file,
        use your terminal's flags or programming language's functionality.
      tags:
        - author affiliation
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: Formatted report to output, along with format string
        content:
          application/json:
            schema:
              type: object
              properties:
                format:
                  description: >
                    Formatting string for the export.
                  type: string
                  enum:
                    - "| Lastname, Firstname | Affiliation | Last Active Date | [csv]"
                    - "| Lastname | Firstname | Affiliation | Last Active Date | [csv]"
                    - "| Lastname, Firstname | Affiliation | Last Active Date | [excel]"
                    - "| Lastname | Firstname | Affiliation | Last Active Date | [excel]"
                    - "Lastname, Firstname(Affiliation)Last Active Date[text]"
                    - "Lastname, Firstname(Affiliation)Last Active Date[browser]"
                selected:
                  description: >
                    Formatted data to export.
                  type: array
                  items:
                    type: string
                    description: >
                      Format: Author name (last, first) | affiliation | last active date (year/month)
      responses:
        '200':
          description: Returns file or text, depending on format requested
        '400':
          description: Bad request, check payload
  /citation_helper:
    post:
      summary: Suggest missing citations
      description: >
        Given a set of bibcodes, this endpoint uses a "friends of friends" analysis
        to suggest up to 10 missing citations. These missing citations cite
        and/or are cited by the papers in the given list, but are not in the list.
        The score given with each returned paper reflects how many papers in the input
        list the result is associated with.
      tags:
        - citation helper
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: JSON containing the bibcode(s) to run the citation helper for
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bibcodesObject'
      responses:
        '200':
          description: JSON containing the suggested papers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    author:
                      type: string
                    bibcode:
                      type: string
                    score:
                      type: integer
                    title:
                      type: string
  /harbour/mirrors:
    get:
      summary: Fetch a list of ADS Classic mirrors
      description: >
        Returns the list of mirrors used by ADS Classic
      tags:
        - classic import
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: Array of available mirrors
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /harbour/user:
    get:
      summary: Fetch user's ADS Classic information
      description: >
        Returns a user's ADS Classic registration email and mirror
      tags:
        - classic import
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: >
            JSON containing user's Classic information. User is determined
            by the API token used.
          content:
            application/json:
              schema:
                type: object
                properties:
                  classic_email:
                    type: string
                  classic_mirror:
                    type: string
                  twopointoh_email:
                    type: string
        '400':
          description: User does not have an ADS Classic account
  /harbour/auth/classic:
    post:
      summary: Sign into ADS Classic account
      description: >
        Sign into ADS Classic account and link it to your main ADS account
      tags:
        - classic import
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: JSON containing the user's Classic ADS authentication
        content:
          application/json:
            schema:
              type: object
              required:
                - classic_email
                - classic_mirror
                - classic_password
              properties:
                classic_email:
                  type: string
                classic_mirror:
                  type: string
                classic_password:
                  type: string
      responses:
        '200':
          description: >
            JSON containing user's stored Classic information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  classic_email:
                    type: string
                  classic_mirror:
                    type: string
                  classic_authed:
                    type: boolean
        '400':
          description: Malformed payload; see error message for details
        '404':
          description: Classic authentication failed
        '500':
          description: Classic did not return a cookie
        '504':
          description: Classic timeout
  /objects:
    post:
      summary: Return object identifers for a given string
      description: >
        For a given string, returns the object identifiers from either NED or
        SIMBAD, whichever is specified
      tags:
        - objects
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing either a list of object names ("objects") or a list
          of SIMBAD object identifiers ("identifiers")
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  type: string
                  enum:
                    - simbad
                    - ned
                  example: "SIMBAD"
                identifiers:
                  type: array
                  items:
                    type: string
                  example: ["1575544"]
                objects:
                  type: array
                  items:
                    type: string
                  example: ["M31"]
      responses:
        '200':
          description: >
            JSON containing the input object or identifier as the key and the values
            are the canonical names or identifiers. If the object or identifier was
            not recognized, the value returned with be None.


            Note: this service also returns a 200 even if an error was encountered;
            be sure to read the returned error message carefully in that case.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object or identifier:
                    type: object
                    properties:
                      id:
                        description: Integer or string, depending on input source
                        type: string
                      canonical:
                        type: string
                example: {"1575544": {"id": "1575544","canonical": "M  31"}}
  /objects/query:
    post:
      summary: Return a Solr query with object identifiers
      description: >
        For a given object, return a Solr query that expands the object
        to include the SIMBAD and NED identifiers.
      tags:
        - objects
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the input object query to expand
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: array
                  items:
                    type: string
              example: {"query":["object:m31"]}
      responses:
        '200':
          description: >
            JSON containing the expanded search query.


            Note: this service also returns a 200 even if an error was encountered;
            be sure to read the returned error message carefully in that case.
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                example: {"query": "((=abs:m31 OR simbid:1575544 OR nedid:MESSIER_031) database:astronomy)"}
  /oracle/matchdoc:
    post:
      summary: Given some input metadata, return the matched bibcode
      description: >
        Matches input metadata to an existing record and returns the bibcode
        of the match. Can be used to find the bibcode of an input record or to
        match various versions of the same record (e.g. the published paper
        with its arXiv version). Also returned is the confidence score and
        which input metadata fields were used in the matching.
      tags:
        - recommender
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the input data for the recommender service
        content:
          application/json:
            schema:
              type: object
              required:
                - abstract
                - title
                - author
                - year
                - doctype
              properties:
                abstract:
                  type: string
                title:
                  type: string
                author:
                  description: Format is "Last1, First1; Last2, First2; ..."
                  type: string
                year:
                  description: Type can be string or integer
                  type: integer
                doctype:
                  description: >
                    Doctype of input metadata
                  type: string
                doi:
                  type: string
                mustmatch:
                  description: >
                    Set flag to true if you know ADS must have this paper; in some cases,
                    the main matching algorithm may fail to find a match (e.g. if the
                    abstract has changed significantly between the arXiv and published version).
                    If this is the case, setting this flag to true allows a match to be made
                    based on the title alone.
                  type: boolean
                match_doctype:
                  description: >
                    Expected doctype of matched record
                  type: array
                  items:
                    type: string
              example: {"abstract":"The nucleus of our nearest, large galactic neighbour, M31, contains an eccentric nuclear disc - a disc of stars on eccentric, apsidally aligned orbits around a supermassive black hole (SMBH). Previous studies of eccentric nuclear discs considered only an isolated disc, and did not study their dynamics under galaxy mergers (particularly a perturbing SMBH). Here, we present the first study of how eccentric discs are affected by a galactic merger. We perform N-body simulations to study the disc under a range of different possible SMBH initial conditions. A second SMBH in the disc always disrupts it, but more distant SMBHs can shut off differential precession and stabilize the disc. This results in a more aligned disc, nearly uniform eccentricity profile, and suppression of tidal disruption events compared to the isolated disc. We also discuss implications of our work for the presence of a secondary SMBH in M31.","title":"Galactic merger implications for eccentric nuclear discs: a mechanism for disc alignment","author":"Rodriguez, Alexander; Generozov, Aleksey; Madigan, Ann-Marie","year":2021,"doctype":"article","match_doctype":["article"],"mustmatch":false}
      responses:
        '200':
          description: >
            JSON containing any matches, plus information about the matching process.
            Confidence and scores range between 0 (low) and 1 (high).


            Note: If no matches are found, the service still returns a 200, but
            instead of the "match" keyword, the "no match" keyword will be returned
            in the JSON.
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    description: >
                      Solr query used to find the matches
                    type: string
                  comment:
                    description: >
                      Logging from the matching algorithm
                    type: string
                  match:
                    type: array
                    items:
                      type: object
                      properties:
                        bibcode:
                          type: string
                        confidence:
                          type: integer
                        scores:
                          type: object
                          properties:
                            abstract:
                              type: integer
                            title:
                              type: integer
                            author:
                              type: integer
                            year:
                              type: integer
                example: {"query": "topn(10, similar(\"The nucleus of our nearest, large galactic neighbour, M31, contains an eccentric nuclear disc - a disc of stars on eccentric, apsidally aligned orbits around a supermassive black hole (SMBH). Previous studies of eccentric nuclear discs considered only an isolated disc, and did not study their dynamics under galaxy mergers (particularly a perturbing SMBH). Here, we present the first study of how eccentric discs are affected by a galactic merger. We perform N-body simulations to study the disc under a range of different possible SMBH initial conditions. A second SMBH in the disc always disrupts it, but more distant SMBHs can shut off differential precession and stabilize the disc. This results in a more aligned disc, nearly uniform eccentricity profile, and suppression of tidal disruption events compared to the isolated disc. We also discuss implications of our work for the presence of a secondary SMBH in M31.\", input abstract, 43, 1, 1)) doctype:(article) property:REFEREED", "comment": "Matching doctype `article`.", "match": [{"bibcode": "2021MNRAS.503.2713R", "confidence": 1, "scores": {"abstract": 1.0, "title": 1.0, "author": 1, "year": 1}}]}
        '400':
          description: No payload provided, or payload is missing needed parameters
  /oracle/readhist:
    post:
      summary: Return recommendations for the current user
      description: >
        Returns paper recommendations for the given user, based on their reading history.
      tags:
        - recommender
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the input data for the recommender service
        content:
          application/json:
            schema:
              type: object
              required:
                - function
              properties:
                function:
                  description: >
                    Second-order operator used to generate recommendations; default is 'similar'
                  type: string
                  enum:
                    - similar
                    - trending
                    - reviews
                    - useful
                sort:
                  description: >
                    Sort order for recommendation query
                  type: string
                num_docs:
                  description: >
                    Number of recommendations to return
                  type: integer
                top_n_reads:
                  description: >
                    Number of input records to use in generating recomendations
                  type: integer
                cutoff_days:
                  description: >
                    Number of days back to generate recommendations; returned recommendations
                    will have been entered into our database between now and N days ago, where N
                    is the entered cutoff_days
                  type: integer
                reader:
                  description: >
                    Internal ID specifying the user; if not included, user will be
                    determined via the API token used
                  type: string
      responses:
        '200':
          description: >
            JSON containing the returned recommendations and the query used to generate them
          content:
            application/json:
              schema:
                type: object
                properties:
                  bibcodes:
                    type: string
                  query:
                    type: string
        '400':
          description: No payload provided, or payload is missing needed parameters
  /oracle/readhist/{function}/{reader}:
    get:
      summary: Return recommendations for the given user
      description: >
        Returns paper recommendations for the given user, based on their reading history.
      tags:
        - recommender
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - name: function
          description: >
            Second-order operator used to generate recommendations; most common is 'similar'
          required: true
          in: path
          schema:
            type: string
        - name: reader
          description: >
            Internal ID specifying the user to generate recommendations for
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: >
            JSON containing the returned recommendations and the query used to generate them
          content:
            application/json:
              schema:
                type: object
                properties:
                  bibcodes:
                    type: string
                  query:
                    type: string
        '400':
          description: Reader was not provided
  /reference/text/{reference}:
    get:
      summary: Resolve a reference string into a bibcode
      description: >
        Given a reference string (such as from the references section
        of a published paper), returns the bibcode of the matching paper.
      tags:
        - reference
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - name: reference
          description: URL-encoded reference string
          required: true
          in: path
          schema:
            type: string
          example: "Kravchenko%20et%20al.%202020%2C%20A%26A%20637%2C%20L6"
      responses:
        '200':
          description: >
            JSON containing the input reference, the matching bibcode, and the confidence score
          content:
            application/json:
              schema:
                type: object
                properties:
                  resolved:
                    type: object
                    properties:
                      bibcode:
                        description: Output matching bibcode
                        type: string
                      refstring:
                        description: Input reference string
                        type: string
                      score:
                        description: Confidence score, ranging from 0 (low) to 1 (high)
                        type: string
                      comment:
                        description: Error message if parsing fails
                        type: string
                example: {"resolved": {"refstring": "Kravchenko et al. 2020, A&A 637, L6", "score": "1.0", "bibcode": "2020A&A...637L...6K"}}
  /reference/text:
    post:
      summary: Resolve one or more reference strings into a bibcode
      description: >
        Given one or more reference strings (such as from the references section
        of a published paper), returns the bibcode of the matching paper.
      tags:
        - reference
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the input reference strings
        content:
          application/json:
            schema:
              type: object
              required:
                - reference
              properties:
                reference:
                  type: array
                  items:
                    type: string
              example: {"reference":["Kravchenko et al. 2020, A&A 637, L6"]}
      responses:
        '200':
          description: >
            JSON containing the input reference, the matching bibcode, and the confidence score
          content:
            application/json:
              schema:
                type: object
                properties:
                  resolved:
                    type: object
                    properties:
                      bibcode:
                        description: Output matching bibcode
                        type: string
                      refstring:
                        description: Input reference string
                        type: string
                      score:
                        description: Confidence score, ranging from 0 (low) to 1 (high)
                        type: string
                      comment:
                        description: Error message if parsing fails
                        type: string
                example: {'refstring': 'Kravchenko et al. 2020, A&A 637, L6', 'score': '1.0', 'bibcode': '2020A&A...637L...6K'}
        '400':
          description: Bad request, check payload
  /reference/xml:
    post:
      summary: Resolve one or more parsed references into a bibcode
      description: >
        Given one or more parsed reference strings, returns the bibcode
        of the matching paper.
      tags:
        - reference
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the parsed input references.
        content:
          application/json:
            schema:
              type: object
              required:
                - parsed_reference
              properties:
                parsed_reference:
                  type: array
                  items:
                    type: string
                    description: >
                      Parsed references, passed as serialized JSON. The following
                      keywords are accepted (note that each value should be formatted
                      as a string):

                      * authors (value is formatted as "Last1, First1, Last2, First2")

                      * journal

                      * title

                      * volume

                      * issue

                      * page

                      * year

                      * doi

                      * arxiv

                      * refstr (used for output only)

                      * issn

                      * refplaintext (if the parsed input fails, this is used for parsing)
                  example: ["{'authors': 'Baumjohann, W., Haerendel, G.H.', 'journal': 'Geophysical Monograph', 'title': 'Physics of Magnetic Flux Ropes', 'volume': '58', 'page': '627', 'year': '1990', 'refstr': 'Baumjohann, W., Haerendel, G.H., 1990. Geophysical Monograph, Physics of Magnetic Flux Ropes, 58, 627.', 'refplaintext': 'Baumjohann, W., Haerendel, G.H., 1990. Geophysical Monograph, Physics of Magnetic Flux Ropes, 58, 627.'}"]
      responses:
        '200':
          description: >
            JSON containing the input reference, the matching bibcode, and the confidence score
          content:
            application/json:
              schema:
                type: object
                properties:
                  resolved:
                    type: object
                    properties:
                      bibcode:
                        description: Output matching bibcode
                        type: string
                      refstring:
                        description: Input reference string
                        type: string
                      score:
                        description: Confidence score, ranging from 0 (low) to 1 (high)
                        type: string
                      comment:
                        description: Error message if parsing fails
                        type: string
        '400':
          description: Bad request, check payload
  /resolver/{bibcode}:
    get:
      summary: Return links to external resources for a given bibcode
      description: >
        Return links to external resources, such as a publisher's full text,
        data links, etc., for a given bibcode
      tags:
        - resolver
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - name: bibcode
          description: Bibcode to return resources for
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ResolverResponse'
        '400':
          description: Malformed request
        '404':
          description: Did not find any matching records
  /resolver/{bibcode}/{link_type}:
    get:
      summary: Return links to a given external resource for a bibcode
      description: >
        Return links to a specific external resource, such as a publisher's
        full text or data links, for a given bibcode
      tags:
        - resolver
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - name: bibcode
          description: Bibcode to return resources for
          required: true
          in: path
          schema:
            type: string
        - name: link_type
          description: >
            External resource type to return (case-insensitive). The available link types
            for a given bibcode can be discovered by returning all available resources
            for a bibcode (via `/resolver/{bibcode}`) and looking at the `type` keywords.

            Note: for `link_type` of `arXiv` or `doi`, an additional parameter, the `id`
            is required. The syntax is `/resolver/{bibcode}/{link_type}:{id}`.


            For example:


            `/resolver/2010ApJ...713L.103B/doi:10.1088/2041-8205/713/2/L103`


            `/resolver/2018arXiv180303598K/arXiv:1803.03598`


            Available values for `link_type`:

            * `abstract` Abstract

            * `citations` Citations to the Article

            * `references` References in the Article

            * `coreads` Also-Read Articles

            * `toc` Table of Contents

            * `openurl`

            * `metrics`

            * `graphics`

            * `esource` Full text sources

              * `pub_pdf` Publisher PDF

              * `eprint_pdf` Arxiv eprint

              * `author_pdf` Link to PDF page provided by author

              * `ads_pdf` ADS PDF

              * `pub_html` Electronic on-line publisher article (HTML)

              * `eprint_html` Arxiv article

              * `author_html` Link to HTML page provided by author

              * `ads_scan` ADS scanned article

              * `gif` backward compatibility similar to /ads_scan

              * `preprint` backward compatibility similar to /eprint_html

              * `ejournal` backward compatibility similar to /pub_html

            * `data` On-line data

              * `aca` Acta Astronomica Data Files

              * `alma` Atacama Large Millimeter/submillimeter Array

              * `ari` Astronomisches Rechen-Institut

              * `astroverse` CfA Dataverse

              * `atnf` Australia Telescope Online Archive

              * `author` Author Hosted Dataset

              * `bavj` Data of the German Association for Variable Stars

              * `bicep2` BICEP/Keck Data

              * `cadc` Canadian Astronomy Data Center

              * `cds` Strasbourg Astronomical Data Center

              * `chandra` Chandra X-Ray Observatory

              * `dryad` International Repository of Research Data

              * `esa` ESAC Science Data Center

              * `eso` European Southern Observatory

              * `figshare` Online Open Access Repository

              * `gcpd` The General Catalogue of Photometric Data

              * `github` Git Repository Hosting Service

              * `gtc` Gran Telescopio CANARIAS Public Archive

              * `heasarc` NASA's High Energy Astrophysics Science Archive Research Center

              * `herschel` Herschel Science Center

              * `ibvs` Information Bulletin on Variable Stars

              * `ines` IUE Newly Extracted Spectra

              * `iso` Infrared Space Observatory

              * `jwst` JWST Proposal Info

              * `koa` Keck Observatory Archive

              * `mast` Mikulski Archive for Space Telescopes

              * `ned` NASA/IPAC Extragalactic Database

              * `nexsci` NASA Exoplanet Archive

              * `noao` National Optical Astronomy Observatory

              * `pangaea` Digital Data Library and a Data Publisher for Earth System Science

              * `pasa` Publication of the Astronomical Society of Australia Datasets

              * `pdg` Particle Data Group

              * `pds` The NASA Planetary Data System

              * `protocols` Collaborative Platform and Preprint Server for Science Methods and Protocols

              * `simbad` SIMBAD Database at the CDS

              * `spitzer` Spitzer Space Telescope

              * `tns` Transient Name Server

              * `vizier` VizieR Catalog Service

              * `xmm` XMM Newton Science Archive

              * `zenodo` Zenodo Archive

            * `inspire` HEP/Spires Information

            * `librarycatalog`

            * `presentation` Multimedia Presentation

            * `associated` Associated Articles
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ResolverResponse'
        '400':
          description: Malformed request
        '404':
          description: Did not find any matching records
  /vault/notifications:
    get:
      summary: View all myADS notifications set up for the current user
      description: >
        View all myADS notifications set up for the current user, associated
        with the given API token
      tags:
        - notifications
        - user-facing
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: Details of notifications set up for the current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/myADSsummaryResponse'
        '400':
          description: Malformed request
        '404':
          description: No notifications found for the given user
    post:
      summary: Create a myADS notification
      description: >
        Create a myADS notification for the current user
      tags:
        - notifications
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the notifications setup. There are two types of notifications:


          * template-type notifications: Notify the user about new papers that match a templated query.
          The following keywords are required:

            * template: The template to use to construct the query. The options are:

              * arxiv: Meant for daily frequency; notifies of new arXiv papers. Requires the data and classes keywords:

                * classes: (required) Array of arXiv categories and sub-categories to include in notifications

                * data: (optional) Formatted search terms to search for within designated classes. If included,
                  notifications will include all papers that match the given categories, and papers that match
                  the search terms in this data keyword will be highlighted.

              * authors: Meant for weekly frequency; notify the user of up to 5 new papers about given authors.
              Requires the data keyword:

                * data: (required) Must be formatted as `author:\"Last, First\"` or `orcid:\"ORCID-ID\"`. Can
                combine multiple author queries using `OR`

              * citations: Meant for weekly frequency; notify the user of new citations to papers by a given author.
              Requires the data keyword:

                * data: (required) Must be formatted as `author:\"Last, First\"` or `orcid:\"ORCID-ID\"`

              * keyword: Meant for weekly frequency; notify the user of new papers matching a given set of
              keywords. Three queries are constructed for the given set of search terms: recent papers,
              trending papers, and useful papers. Requires the data keyword:

                * data: (required) Formatted search terms or keywords

          * query-type notifications: These notify the user about new papers that match a given query.
          The following keywords are required:

            * name: Name to call the notification

            * qid: Query ID returned from the `/vault/query` endpoint, pointing to the stored query

            * frequency: Daily or weekly notification frequency

            * stateful: Set to true to only be notified of new papers; set to false to be notified of
            the top matches to a query, whether or not you've seen them before

        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  enum:
                    - template
                    - query
                name:
                  description: Optional for type=template; required for type=query
                  type: string
                qid:
                  description: Only used for type=query
                  type: string
                active:
                  description: Set to true to receive this notification
                  type: boolean
                stateful:
                  description: Only used for type=query
                  type: boolean
                frequency:
                  type: string
                  enum:
                    - daily
                    - weekly
                template:
                  description: Only used for type=template
                  type: string
                  enum:
                    - arxiv
                    - authors
                    - citations
                    - keyword
                classes:
                  description: Only used for type=template and template=arxiv
                  type: array
                  items:
                    type: string
                data:
                  type: string
      responses:
        '200':
          description: Returns notification setup details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/myADSsummaryResponse'
                  - $ref: '#/components/schemas/myADSdetailResponse'
        '400':
          description: Malformed request
        '404':
          description: Query associated with give QID does not exist
        '500':
          description: User does not exist or other error
  /vault/notifications/{myads_id}:
    get:
      summary: View the details for one myADS notification
      description: >
        View the details for one myADS notification set up for the current user, associated
        with the given API token
      tags:
        - notifications
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - $ref: '#/components/parameters/myadsId'
      responses:
        '200':
          description: Details of none otification set up for the current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/myADSsummaryResponse'
                  - $ref: '#/components/schemas/myADSdetailResponse'
        '400':
          description: Malformed request
        '404':
          description: Notification not found
    put:
      summary: Edit the details for one myADS notification
      description: >
        Edit the details for one myADS notification set up for the current user, associated
        with the given API token
      tags:
        - notifications
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - $ref: '#/components/parameters/myadsId'
      requestBody:
        description: >
          JSON containing metadata of notification to edit.


          Note: only need to include information that needs to be changed.
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
                name:
                  type: string
                classes:
                  type: array
                  items:
                    type: string
                active:
                  type: boolean
                stateful:
                  type: boolean
                frequency:
                  type: string
                  enum:
                    - daily
                    - weekly
      responses:
        '200':
          description: Details of none otification set up for the current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/myADSsummaryResponse'
                  - $ref: '#/components/schemas/myADSdetailResponse'
        '400':
          description: Malformed request
        '404':
          description: Notification not found
        '500':
          description: User does not exist or other error
    delete:
      summary: Delete one myADS notification
      description: >
        Delete one myADS notification set up for the current user, associated
        with the given API token
      tags:
        - notifications
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - $ref: '#/components/parameters/myadsId'
      responses:
        '204':
          description: Successfully deleted the notification
        '404':
          description: Notification not found
        '500':
          description: Error during request
  /vault/notification_query/{myads_id}:
    get:
      summary: Return a constructed myADS query
      description: >
        Given a myADS ID for a single notification setup, use the inputed data
        to build the full query(ies), ready for execution.
      tags:
        - notifications
        - user-facing
      security:
        - ApiKeySecurity: []
      parameters:
        - $ref: '#/components/parameters/myadsId'
      responses:
        '200':
          description: >
            Constructed query and sort parameter. For the keyword and arxiv template-type queries,
            more than one query and sort parameter will be returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    q:
                      type: string
                    sort:
                      type: string
        '400':
          description: Malformed request
        '404':
          description: Notification not found
  /vis/author-network:
    post:
      summary: Returns author network data
      description: >
        Used to generate our author network visualization, given an input set of bibcodes,
        returns the author network data
      tags:
        - visualizations
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the input bibcodes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bibcodesObject'
      responses:
        '200':
          description: Author network data
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: object
                    properties:
                      start:
                        type: integer
                      rows:
                        type: integer
                      numFound:
                        type: integer
                  data:
                    type: object
                    properties:
                      bibcode_dict:
                        type: object
                        properties:
                          bibcode:
                            type: object
                            properties:
                              read_count:
                                type: integer
                              authors:
                                type: array
                                items:
                                  type: string
                              citation_count:
                                type: integer
                              title:
                                type: string
                      root:
                        type: object
                        properties:
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                nodeName:
                                  type: string
                                nodeWeight:
                                  type: integer
                                delete:
                                  type: boolean
                          children:
                            type: array
                            items:
                              type: object
                              properties:
                                read_count:
                                  type: integer
                                name:
                                  type: string
                                citation_count:
                                  type: integer
                                numberName:
                                  type: integer
                                papers:
                                  type: array
                                  items:
                                    type: string
                                size:
                                  type: number
                      link_data:
                        type: array
                        items:
                          type: array
                          items:
                            type: integer
        '403':
          description: Error with request
  /vis/paper-network:
    post:
      summary: Returns author network data
      description: >
        Used to generate our author network visualization, given an input set of bibcodes,
        returns the author network data
      tags:
        - visualizations
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the input bibcodes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bibcodesObject'
      responses:
        '200':
          description: Paper network data
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: object
                    properties:
                      start:
                        type: integer
                      rows:
                        type: integer
                      numFound:
                        type: integer
                  data:
                    type: object
                    properties:
                      summaryGraph:
                        type: object
                        properties:
                          directed:
                            type: boolean
                          graph:
                            type: array
                            default: []
                            items:
                              type: integer
                          nodes:
                            type: array
                            items:
                              type: object
                              properties:
                                paper_count:
                                  type: integer
                                node_label:
                                  type: object
                                  properties:
                                    label:
                                      type: number
                                total_citations:
                                  type: integer
                                node_name:
                                  type: integer
                                top_common_references:
                                  type: object
                                  properties:
                                    bibcode:
                                      type: number
                                total_reads:
                                  type: integer
                                stable_index:
                                  type: integer
                                id:
                                  type: integer
                          links:
                            type: array
                            items:
                              type: object
                              properties:
                                source:
                                  type: integer
                                target:
                                  type: integer
                                weight:
                                  type: integer
                          multigraph:
                            type: boolean
                      fullGraph:
                        type: object
                        properties:
                          directed:
                            type: boolean
                          graph:
                            type: array
                            default: []
                            items:
                              type: integer
                          nodes:
                            type: array
                            items:
                              type: object
                              properties:
                                read_count:
                                  type: integer
                                group:
                                  type: integer
                                title:
                                  type: string
                                first_author:
                                  type: string
                                citation_count:
                                  type: integer
                                node_name:
                                  type: string
                                id:
                                  type: integer
                                nodeWeight:
                                  type: integer
                          links:
                            type: array
                            items:
                              type: object
                              properties:
                                source:
                                  type: integer
                                overlap:
                                  type: array
                                  items:
                                    type: string
                                weight:
                                  type: integer
                                target:
                                  type: integer
        '403':
          description: Error with request
  /vis/word-cloud:
    post:
      summary: Returns the word cloud data
      description: >
        Used to generate our word/concept cloud visualization, given an input query,
        returns the word cloud data
      tags:
        - visualizations
        - user-facing
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the input query
        content:
          application/json:
            schema:
              type: object
              properties:
                q:
                  description: >
                    Query string; can include search tags. If using
                    quotes, make sure to escape them.
                  type: array
                  items:
                    type: string
                  example: ["author:\"huchra, john\""]
                sort:
                  type: array
                  items:
                    type: string
                  example: ["date desc, bibcode desc"]
                rows:
                  description: >
                    Number of records to use in generating the word cloud;
                    currently the maximum allowed is 500.
                  type: array
                  items:
                    type: integer
                  example: [150]
      responses:
        '200':
          description: Word cloud data
          content:
            application/json:
              schema:
                type: object
                properties:
                  word:
                    description: Keywords are the words in the cloud
                    type: object
                    properties:
                      idf:
                        description: Inverse document frequency
                        type: number
                      record_count:
                        type: integer
                      total_occurrences:
                        type: integer
        '403':
          description: Error with request
externalDocs:
  description: Complete documentation describing how to use this API
  url: https://github.com/adsabs/adsabs-dev-api
